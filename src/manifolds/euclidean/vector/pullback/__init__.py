import torch
from src.manifolds.euclidean.vector import VectorEuclidean

class PullbackVectorEuclidean(VectorEuclidean):
    """ Base class describing a R^d under a pullback Riemannian geometry generated by a Diffeomorphism """

    def __init__(self, manifold, diffeomorphism):
        super().__init__(diffeomorphism.d)
        self.phi = diffeomorphism 
        self.manifold = manifold

    def barycentre(self, x):
        """

        :param x: N x d
        :return: d
        """
        return self.phi.inverse(self.manifold.barycentre(self.phi.forward(x))[None])[0]

    def inner(self, x, X, Y):
        """

        :param x: N x d
        :param X: N x M x d
        :param Y: N x L x d
        :return: N x M x L
        """
        M = X.shape[1]
        L = Y.shape[1]
        return self.manifold.inner(self.phi.forward(x),
                                   self.phi.differential_forward((x[:, None].repeat(1,M,1)).reshape(-1, self.d), X.reshape(-1, self.d)).reshape(X.shape),
                                   self.phi.differential_forward((x[:, None].repeat(1,L,1)).reshape(-1, self.d), Y.reshape(-1, self.d)).reshape(Y.shape)
                                   )

    def geodesic(self, x, y, t):
        """

        :param x: d or N x d
        :param y: d or N x d
        :param t: N or 1
        :return: N x d
        """
        if len(t) == 1:
            return self.phi.inverse(self.manifold.geodesic(self.phi.forward(x), self.phi.forward(y), t))
        else:
            return self.phi.inverse(self.manifold.geodesic(self.phi.forward(x[None])[0], self.phi.forward(y[None])[0], t))
            

    def log(self, x, y):
        """

        :param x: d
        :param y: N x d
        :return: N x d
        """
        N = y.shape[0]
        return self.phi.differential_inverse(self.phi.forward(x[None]).repeat(N,1),
                                                self.manifold.log(self.phi.forward(x[None])[0], self.phi.forward(y))
                                                )

    def exp(self, x, X):
        """

        :param x: d
        :param X: N x d
        :return: N x d
        """
        N = X.shape[0]
        return self.phi.inverse(self.manifold.exp(self.phi.forward(x[None])[0], self.phi.differential_forward(x[None].repeat(N,1), X)))

    def distance(self, x, y):
        """

        :param x: N x M x d
        :param y: N x L x d
        :return: N x M x L
        """
        return self.manifold.distance(self.phi.forward(x.reshape(-1, self.d)).reshape(x.shape), self.phi.forward(y.reshape(-1, self.d)).reshape(y.shape))

    def parallel_transport(self, x, X, y):
        """

        :param x: d
        :param X: N x d
        :param y: d
        :return: N x d
        """
        N = X.shape[0]
        return self.phi.differential_inverse(self.phi.forward(y[None]).repeat(N,1),
                                                self.manifold.parallel_transport(self.phi.forward(x[None])[0],
                                                                                 self.phi.differential_forward(x[None].repeat(N,1), X),
                                                                                 self.phi.forward(y[None])[0]
                                                                                 )
                                                )
    